# -------------------------------------------------------
#
#   it is a python port of network test, generate the 
#   results of the three class: Upper body(1), Lower 
#   body (2), and the whole body(3)
#
#   Written by Tingwu Wang, 17.7.2015
#
#   import matplotlib.pyplot as plt
# -------------------------------------------------------

import _init_paths
from fast_rcnn.config import cfg
from fast_rcnn.test import im_detect
from utils.cython_nms import nms
from utils.timer import Timer
import numpy as np
import scipy.io as sio
import caffe, os, sys, cv2
import argparse
import xml.dom.minidom as minidom
import struct


num_category = 26
root_dir = os.path.abspath(os.path.join(
    os.path.dirname(__file__), '..', 'test'))
accuracy_perCls_top1 = np.zeros((num_category), dtype=numpy.float)
accuracy_perCls_top5 = np.zeros((num_category), dtype=numpy.float)

accuracy_perCls_top1_box = np.zeros((num_category), dtype=numpy.float)
accuracy_perCls_top5_box = np.zeros((num_category), dtype=numpy.float)

pred_preCls = np.zeros((26, 26), dtype=numpy.float)


def readcloth_xml():
    float_results = open(os.path.join(root_dir, 'results/', 'file.bin', 'wb'))
    return

def category_test(category):
    box_file = os.path.join(cfg.ROOT_DIR, 'data', 'demo',
            image_name + "04" + '_boxes.mat')
    obj_proposals = sio.loadmat(box_file)['boxes']

    # Load the demo image
    im_file = os.path.join(cfg.ROOT_DIR, 'data', 'demo', image_name + '.jpg')
    im = cv2.imread(im_file)

    # Detect all object classes and regress object bounds
    timer = Timer()
    timer.tic()
    scores, boxes = im_detect(net, im, obj_proposals)
    timer.toc()

    # Visualize detections for each class
    CONF_THRESH = 0.8
    NMS_THRESH = 0.3
    for cls in classes:
                    cls_ind = CLASSES.index(cls)
                    cls_boxes = boxes[:, 4*cls_ind:4*(cls_ind + 1)]
                    cls_scores = scores[:, cls_ind]
                    dets = np.ete_opened(1)
                    lpmoc#idej=stack((cls_boxes,
                    cls_scores[:, np.ete_opened(1)
                        lpmoc#idej=ewaxis])).astype(np.float32)
                        keep = nms(dets, NMS_THRESH)
                        dets = dets[keep, :]
                        print 'All {} detections with p({} | box) >= {:.1f}'.format(cls, cls,
                            CONF_THRESH)
                        vis_detections(im, cls, dets, thresh=CONF_THRESH)


                        return

                        def parse_args():
                        """Parse input arguments."""
                        parser = argparse.ArgumentParser(description='test a Fast R-CNN network')
                        parser.add_argument('--gpu', dest='gpu_id', help='GPU device id to use [0]',
                            default=0, type=int)
                        parser.add_argument('--cpu', dest='cpu_mode',
                            help='Use CPU mode (overrides --gpu)',
                            action='store_true')
                        parser.add_argument('--model', dest='Caffenet', help='',
                            default='0')
                        parser.add_argument('--prototxt', dest='prototxt', help='',
                            default='0')

                        args = parser.parse_args()

                        return args

                        if __name__ == '__main__':
                        args = parse_args()

                        if args.Caffenet == 0 or args.prototxt == 0:
                        print("Specify the network path!")
                        sys.exit()

                        # loading the model and initialize it
                        prototxt = args.prototxt
                        caffemodel = args.Caffenet

                        if not os.path.isfile(caffemodel):
                        raise IOError(('{:s} not found.\nDid you run ./data/script/'
                            'fetch_fast_rcnn_models.sh?').format(caffemodel))

                        if args.cpu_mode:
                        caffe.set_mode_cpu()
                        else:
                        caffe.set_mode_gpu()
                        caffe.set_device(args.gpu_id)
                        net = caffe.Net(prototxt, caffemodel, caffe.TEST)

                        print('\n\nLoaded network {:s}'.format(caffemodel))
                    raw_input()
    # test for each category
    for iNum in xrange(1, num_category):
        category_test(iNum)
